<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Yuyu&#39;s Blog</title>
        <link>https://yzxiu.github.io/</link>
        <description>Yuyu&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 15 Jan 2023 18:35:14 &#43;0800</lastBuildDate>
            <atom:link href="https://yzxiu.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>client-go解析(4) - cache.Controller</title>
    <link>https://yzxiu.github.io/2023-01-15-client-go-4-cache-controller/</link>
    <pubDate>Sun, 15 Jan 2023 18:35:14 &#43;0800</pubDate>
    <author>Yuyu</author>
    <guid>https://yzxiu.github.io/2023-01-15-client-go-4-cache-controller/</guid>
    <description><![CDATA[概述 本文中提到的 reflector, 特指 informer 中的 reflector, 即传入的 cache.Store 为 DeltaFIFO Controller 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // Controller is a low-level controller that is parameterized by a // Config and used in sharedIndexInformer. type Controller interface { // Run does two things. One is to]]></description>
</item>
<item>
    <title>client-go解析(3) - cache.Reflector</title>
    <link>https://yzxiu.github.io/2023-01-14-client-go-3-reflector/</link>
    <pubDate>Sat, 14 Jan 2023 23:45:36 &#43;0800</pubDate>
    <author>Yuyu</author>
    <guid>https://yzxiu.github.io/2023-01-14-client-go-3-reflector/</guid>
    <description><![CDATA[概述 cache.Reflector 可以说是k8s最重要的组件，它串联起k8s的整个流程。 在服务端(apiserver) ，使用 reflector 向 etcd 获取资源数据。 在连接端(informe]]></description>
</item>
<item>
    <title>client-go解析(2) - cache.Store</title>
    <link>https://yzxiu.github.io/2023-01-12-client-go-2-cache-store/</link>
    <pubDate>Thu, 12 Jan 2023 21:39:15 &#43;0800</pubDate>
    <author>Yuyu</author>
    <guid>https://yzxiu.github.io/2023-01-12-client-go-2-cache-store/</guid>
    <description><![CDATA[概述 如果把k8s当成资源管理系统, 那cache.Store无疑是最核心的接口, 用于缓存,存储资源 。 reflector 依赖于 cache.Store 的实现做存储，根据不同的实现有不]]></description>
</item>
<item>
    <title>client-go解析(1)</title>
    <link>https://yzxiu.github.io/2023-01-12-client-go-1/</link>
    <pubDate>Thu, 12 Jan 2023 09:52:51 &#43;0800</pubDate>
    <author>Yuyu</author>
    <guid>https://yzxiu.github.io/2023-01-12-client-go-1/</guid>
    <description><![CDATA[概述 k8s许多重要的基础类型，都在client-go中定义。 如 cache.Store、cache.Reflector等。 接下来分析这些重要的]]></description>
</item>
<item>
    <title>Containerd解析(12) network</title>
    <link>https://yzxiu.github.io/2022-12-02-containerd-12-containerd-network/</link>
    <pubDate>Fri, 02 Dec 2022 09:45:30 &#43;0800</pubDate>
    <author>Yuyu</author>
    <guid>https://yzxiu.github.io/2022-12-02-containerd-12-containerd-network/</guid>
    <description><![CDATA[概述 分析containerd网络，从不同的上层应用： nerdctl run -d &ndash;name runcdev -p 8080:80 nginx kubectl run nginx &ndash;image=nginx 根据containerd 的 Scope and principles The following table specifies the various components of containerd and general features of container runtimes. The]]></description>
</item>
<item>
    <title>Containerd解析(11) - event &amp; go-events</title>
    <link>https://yzxiu.github.io/2022-11-23-containerd-11-go-events/</link>
    <pubDate>Wed, 23 Nov 2022 16:35:35 &#43;0800</pubDate>
    <author>Yuyu</author>
    <guid>https://yzxiu.github.io/2022-11-23-containerd-11-go-events/</guid>
    <description><![CDATA[概述 在 containerd 的 event 中，主要用到了 go-events 这个包。 为 Go 实现一个可组合的事件分发包。 初始化 在containerd启动过程中， 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]]></description>
</item>
<item>
    <title>Containerd解析(10) - Containerd Start</title>
    <link>https://yzxiu.github.io/2022-11-18-containerd-10-containerd-start/</link>
    <pubDate>Fri, 18 Nov 2022 11:55:14 &#43;0800</pubDate>
    <author>Yuyu</author>
    <guid>https://yzxiu.github.io/2022-11-18-containerd-10-containerd-start/</guid>
    <description><![CDATA[概述 了解containerd的启动过程。 重点关注api接口 ContainersClient、 TasksClient的实现。 Container]]></description>
</item>
<item>
    <title>Containerd解析(9) - Containerd,Containerd-shim,runc的依存关系</title>
    <link>https://yzxiu.github.io/2022-11-18-containerd-9-containerd-containerd-shim-runc/</link>
    <pubDate>Fri, 18 Nov 2022 09:07:39 &#43;0800</pubDate>
    <author>Yuyu</author>
    <guid>https://yzxiu.github.io/2022-11-18-containerd-9-containerd-containerd-shim-runc/</guid>
    <description><![CDATA[概述 参考文章，该文时间比较久远，containerd的很多逻辑已经发生变化。 学习该文思路，重新整理Containerd,Containerd]]></description>
</item>
<item>
    <title>Containerd解析(8) - Runc Modes</title>
    <link>https://yzxiu.github.io/2022-11-15-containerd-8-runc-modes/</link>
    <pubDate>Tue, 15 Nov 2022 17:04:35 &#43;0800</pubDate>
    <author>Yuyu</author>
    <guid>https://yzxiu.github.io/2022-11-15-containerd-8-runc-modes/</guid>
    <description><![CDATA[概述 在runc中， 有两种 Terminal Modes，分别是：New Terminal、Pass-Through 有两种 Runc Modes，分别是：Foregroun]]></description>
</item>
<item>
    <title>Containerd解析(7) - log</title>
    <link>https://yzxiu.github.io/2022-11-14-containerd-7-log/</link>
    <pubDate>Mon, 14 Nov 2022 11:14:42 &#43;0800</pubDate>
    <author>Yuyu</author>
    <guid>https://yzxiu.github.io/2022-11-14-containerd-7-log/</guid>
    <description><![CDATA[概述 容器日志处理，其实就是处理runc程序的标准输出，标准错误。 这里我们分析 containerd-shim-runc-v2 与 runc 查看 shim 调用runc的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17]]></description>
</item>
</channel>
</rss>
